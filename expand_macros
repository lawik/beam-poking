#!/usr/bin/env elixir

[file, outfile] = System.argv()
IO.puts("Compiling file to AST '#{file}'")
content = File.read!(file)

quoted = Code.string_to_quoted!(content)

expanded = Macro.prewalk(quoted, fn part ->
  IO.inspect(part, label: "part")
  case part do
    # Do not expand defmodule
    {:defmodule, _, _} -> part
    {:def, _, _} -> part
    {:defp, _, _} -> part
    {:defmacro, _, _} -> part
    {:defmacrop, _, _} -> part
    other -> Macro.expand(other, __ENV__)
  end

end)

code = Macro.to_string(expanded)

IO.puts("Writing file '#{outfile}'")
File.write!(outfile, code)
